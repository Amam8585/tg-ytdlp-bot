#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ fake_message, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ message_thread_id
"""

import os
import re
from pathlib import Path

def fix_fake_message_calls(file_path):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤—ã fake_message –≤ —Ñ–∞–π–ª–µ"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original_content = content
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–∑–æ–≤–æ–≤ fake_message –±–µ–∑ message_thread_id
        # –ò—â–µ–º: fake_message(text, user_id) –∏–ª–∏ fake_message(text, user_id, command)
        pattern = r'fake_message\(([^,]+),\s*([^,)]+)(?:,\s*([^)]+))?\)'
        
        def replace_fake_message(match):
            text = match.group(1).strip()
            user_id = match.group(2).strip()
            command = match.group(3).strip() if match.group(3) else None
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç message_thread_id, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
            if 'message_thread_id' in match.group(0):
                return match.group(0)
            
            # –ï—Å–ª–∏ —ç—Ç–æ callback_query –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query.message
            if 'callback_query' in content[max(0, match.start()-200):match.start()]:
                if command:
                    return f'fake_message_with_context({text}, {user_id}, callback_query.message, {command})'
                else:
                    return f'fake_message_with_context({text}, {user_id}, callback_query.message)'
            
            # –ï—Å–ª–∏ —ç—Ç–æ message –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º message
            if 'message' in content[max(0, match.start()-200):match.start()]:
                if command:
                    return f'fake_message_with_context({text}, {user_id}, message, {command})'
                else:
                    return f'fake_message_with_context({text}, {user_id}, message)'
            
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return match.group(0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        content = re.sub(pattern, replace_fake_message, content)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        if content != original_content:
            with open(file_path, 'w', encoding='utf-8') as f:
                content.write(content)
            print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            return True
        else:
            print(f"‚è≠Ô∏è  –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
    files_to_check = [
        "COMMANDS/settings_cmd.py",
        "COMMANDS/clean_cmd.py", 
        "COMMANDS/cookies_cmd.py",
        "URL_PARSERS/url_extractor.py"
    ]
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ fake_message –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤...")
    
    fixed_count = 0
    for file_path in files_to_check:
        if os.path.exists(file_path):
            if fix_fake_message_calls(file_path):
                fixed_count += 1
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()
