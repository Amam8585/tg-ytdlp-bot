#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ (threads) –≤ –±–æ—Ç–µ
"""

import os
import re
from pathlib import Path

def check_thread_support():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–ø–∏–∫–æ–≤ –≤ –∫–æ–¥–µ"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ (threads) –≤ –±–æ—Ç–µ...")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    key_files = [
        "HELPERS/safe_messeger.py",
        "COMMANDS/image_cmd.py", 
        "DOWN_AND_UP/down_and_up.py",
        "DOWN_AND_UP/down_and_audio.py",
        "DOWN_AND_UP/always_ask_menu.py"
    ]
    
    thread_support_score = 0
    total_checks = 0
    
    for file_path in key_files:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}:")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤
        checks = [
            ("message_thread_id", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ message_thread_id"),
            ("get_message_thread_id", "–§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è thread_id"),
            ("fake_message.*message_thread_id", "fake_message —Å thread_id"),
            ("safe_send_message.*message_thread_id", "safe_send_message —Å thread_id"),
            ("ReplyParameters.*message_thread_id", "ReplyParameters —Å thread_id"),
            ("send_media_group.*message_thread_id", "send_media_group —Å thread_id"),
            ("forward_messages.*message_thread_id", "forward_messages —Å thread_id")
        ]
        
        file_score = 0
        for pattern, description in checks:
            if re.search(pattern, content, re.IGNORECASE):
                print(f"  ‚úÖ {description}")
                file_score += 1
            else:
                print(f"  ‚ùå {description}")
        
        thread_support_score += file_score
        total_checks += len(checks)
        print(f"  üìä –û—Ü–µ–Ω–∫–∞ —Ñ–∞–π–ª–∞: {file_score}/{len(checks)}")
    
    print(f"\nüìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤: {thread_support_score}/{total_checks}")
    
    if thread_support_score >= total_checks * 0.8:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤!")
    elif thread_support_score >= total_checks * 0.6:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤, –Ω–æ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("‚ùå –°–ª–∞–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

def check_specific_patterns():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    
    patterns_to_check = [
        {
            "pattern": r"getattr\([^,]+,\s*['\"]message_thread_id['\"][^)]*\)",
            "description": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ message_thread_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π",
            "files": ["COMMANDS", "DOWN_AND_UP", "HELPERS"]
        },
        {
            "pattern": r"message_thread_id\s*=\s*getattr",
            "description": "–ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ message_thread_id",
            "files": ["COMMANDS", "DOWN_AND_UP", "HELPERS"]
        },
        {
            "pattern": r"kwargs\['message_thread_id'\]",
            "description": "–ü–µ—Ä–µ–¥–∞—á–∞ message_thread_id –≤ kwargs",
            "files": ["COMMANDS", "DOWN_AND_UP", "HELPERS"]
        },
        {
            "pattern": r"fake_message.*original_message",
            "description": "fake_message —Å original_message",
            "files": ["COMMANDS", "DOWN_AND_UP", "URL_PARSERS"]
        }
    ]
    
    for pattern_info in patterns_to_check:
        pattern = pattern_info["pattern"]
        description = pattern_info["description"]
        files = pattern_info["files"]
        
        found_count = 0
        for file_dir in files:
            if os.path.exists(file_dir):
                for file_path in Path(file_dir).rglob("*.py"):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        if re.search(pattern, content, re.IGNORECASE):
                            found_count += 1
                    except Exception:
                        continue
        
        print(f"  {'‚úÖ' if found_count > 0 else '‚ùå'} {description}: –Ω–∞–π–¥–µ–Ω–æ {found_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

if __name__ == "__main__":
    check_thread_support()
    check_specific_patterns()
