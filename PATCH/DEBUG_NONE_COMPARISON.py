#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò –û–®–ò–ë–ö–ò NONE COMPARISON
===========================================================

–≠—Ç–æ—Ç –ø–∞—Ç—á –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏:
'>' not supported between instances of 'NoneType' and 'int'

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 11.10.2025
"""

import os
import re
import logging
from typing import Any, Optional

def apply_debug_none_comparison():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–∫–∏ None comparison"""
    
    print("üîç –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–∫–∏ None comparison...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    def debug_comparison_decorator(func):
        def wrapper(*args, **kwargs):
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                logger.debug(f"üîç –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò: {func.__name__}")
                logger.debug(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
                logger.debug(f"   –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                result = func(*args, **kwargs)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                logger.debug(f"‚úÖ –§–£–ù–ö–¶–ò–Ø {func.__name__} –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û")
                return result
                
            except TypeError as e:
                if "'>' not supported between instances of 'NoneType' and 'int'" in str(e):
                    logger.error(f"‚ùå –û–®–ò–ë–ö–ê NONE COMPARISON –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
                    logger.error(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
                    logger.error(f"   –ö–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {kwargs}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    for i, arg in enumerate(args):
                        if arg is None:
                            logger.error(f"   ‚ö†Ô∏è  –ê—Ä–≥—É–º–µ–Ω—Ç {i} —Ä–∞–≤–µ–Ω None: {arg}")
                        elif isinstance(arg, (int, float)):
                            logger.error(f"   ‚úÖ –ê—Ä–≥—É–º–µ–Ω—Ç {i} - —á–∏—Å–ª–æ: {arg}")
                        else:
                            logger.error(f"   ‚ùì –ê—Ä–≥—É–º–µ–Ω—Ç {i} - –¥—Ä—É–≥–æ–π —Ç–∏–ø: {type(arg)} = {arg}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                    for key, value in kwargs.items():
                        if value is None:
                            logger.error(f"   ‚ö†Ô∏è  –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç {key} —Ä–∞–≤–µ–Ω None: {value}")
                        elif isinstance(value, (int, float)):
                            logger.error(f"   ‚úÖ –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç {key} - —á–∏—Å–ª–æ: {value}")
                        else:
                            logger.error(f"   ‚ùì –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç {key} - –¥—Ä—É–≥–æ–π —Ç–∏–ø: {type(value)} = {value}")
                
                raise e
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {e}")
                raise e
        
        return wrapper
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
    try:
        from DOWN_AND_UP.always_ask_menu import ask_quality_menu
        ask_quality_menu = debug_comparison_decorator(ask_quality_menu)
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ ask_quality_menu")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ ask_quality_menu: {e}")
    
    try:
        from DOWN_AND_UP.yt_dlp_hook import get_video_formats
        get_video_formats = debug_comparison_decorator(get_video_formats)
        print("‚úÖ –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ get_video_formats")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ get_video_formats: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ
    def patch_comparison_operators():
        """–ü–∞—Ç—á–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        original_gt = int.__gt__
        original_lt = int.__lt__
        original_ge = int.__ge__
        original_le = int.__le__
        
        def safe_gt(self, other):
            try:
                if self is None or other is None:
                    logger.error(f"‚ùå –ü–´–¢–ê–ï–ú–°–Ø –°–†–ê–í–ù–ò–¢–¨ None: self={self}, other={other}")
                    logger.error(f"   –¢–∏–ø self: {type(self)}, –¢–∏–ø other: {type(other)}")
                    return False
                return original_gt(self, other)
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–†–ê–í–ù–ï–ù–ò–ò >: {e}")
                logger.error(f"   self={self} (—Ç–∏–ø: {type(self)})")
                logger.error(f"   other={other} (—Ç–∏–ø: {type(other)})")
                return False
        
        def safe_lt(self, other):
            try:
                if self is None or other is None:
                    logger.error(f"‚ùå –ü–´–¢–ê–ï–ú–°–Ø –°–†–ê–í–ù–ò–¢–¨ None: self={self}, other={other}")
                    logger.error(f"   –¢–∏–ø self: {type(self)}, –¢–∏–ø other: {type(other)}")
                    return False
                return original_lt(self, other)
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–†–ê–í–ù–ï–ù–ò–ò <: {e}")
                logger.error(f"   self={self} (—Ç–∏–ø: {type(self)})")
                logger.error(f"   other={other} (—Ç–∏–ø: {type(other)})")
                return False
        
        def safe_ge(self, other):
            try:
                if self is None or other is None:
                    logger.error(f"‚ùå –ü–´–¢–ê–ï–ú–°–Ø –°–†–ê–í–ù–ò–¢–¨ None: self={self}, other={other}")
                    logger.error(f"   –¢–∏–ø self: {type(self)}, –¢–∏–ø other: {type(other)}")
                    return False
                return original_ge(self, other)
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–†–ê–í–ù–ï–ù–ò–ò >=: {e}")
                logger.error(f"   self={self} (—Ç–∏–ø: {type(self)})")
                logger.error(f"   other={other} (—Ç–∏–ø: {type(other)})")
                return False
        
        def safe_le(self, other):
            try:
                if self is None or other is None:
                    logger.error(f"‚ùå –ü–´–¢–ê–ï–ú–°–Ø –°–†–ê–í–ù–ò–¢–¨ None: self={self}, other={other}")
                    logger.error(f"   –¢–∏–ø self: {type(self)}, –¢–∏–ø other: {type(other)}")
                    return False
                return original_le(self, other)
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –í –°–†–ê–í–ù–ï–ù–ò–ò <=: {e}")
                logger.error(f"   self={self} (—Ç–∏–ø: {type(self)})")
                logger.error(f"   other={other} (—Ç–∏–ø: {type(other)})")
                return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
        try:
            int.__gt__ = safe_gt
            int.__lt__ = safe_lt
            int.__ge__ = safe_ge
            int.__le__ = safe_le
            print("‚úÖ –ü–∞—Ç—á–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ int")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –∫ int: {e}")
        
        # –¢–∞–∫–∂–µ –ø–∞—Ç—á–∏–º float
        try:
            float.__gt__ = safe_gt
            float.__lt__ = safe_lt
            float.__ge__ = safe_ge
            float.__le__ = safe_le
            print("‚úÖ –ü–∞—Ç—á–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ float")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—á–∏ –∫ float: {e}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
    patch_comparison_operators()
    
    print("üéâ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("   –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—à–∏–±–∫–∏ None comparison –±—É–¥—É—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è")

if __name__ == "__main__":
    apply_debug_none_comparison()
