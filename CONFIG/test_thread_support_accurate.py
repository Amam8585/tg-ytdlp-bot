#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ (threads) –≤ –±–æ—Ç–µ
"""

import os
import re
from pathlib import Path

def check_thread_support_accurate():
    """–¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤"""
    print("üîç –¢–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ (threads) –≤ –±–æ—Ç–µ...")
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    key_files = [
        "HELPERS/safe_messeger.py",
        "COMMANDS/image_cmd.py", 
        "DOWN_AND_UP/down_and_up.py",
        "DOWN_AND_UP/down_and_audio.py",
        "DOWN_AND_UP/always_ask_menu.py"
    ]
    
    total_score = 0
    max_score = 0
    
    for file_path in key_files:
        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}:")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        file_score = 0
        file_max = 0
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è message_thread_id
        file_max += 1
        if 'message_thread_id' in content:
            print("  ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ message_thread_id")
            file_score += 1
        else:
            print("  ‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ message_thread_id")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è thread_id
        file_max += 1
        if 'getattr.*message_thread_id' in content or 'get_message_thread_id' in content:
            print("  ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ thread_id")
            file_score += 1
        else:
            print("  ‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ thread_id")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API —Ñ—É–Ω–∫—Ü–∏–∏
        file_max += 1
        api_patterns = [
            'send_media_group.*message_thread_id',
            'forward_messages.*message_thread_id',
            'send_message.*message_thread_id',
            'message_thread_id.*kwargs'
        ]
        if any(re.search(pattern, content, re.IGNORECASE) for pattern in api_patterns):
            print("  ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –≤ API —Ñ—É–Ω–∫—Ü–∏–∏")
            file_score += 1
        else:
            print("  ‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –≤ API —Ñ—É–Ω–∫—Ü–∏–∏")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fake —Å–æ–æ–±—â–µ–Ω–∏–π
        file_max += 1
        if 'fake_message.*message_thread_id' in content or 'original_message' in content:
            print("  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ fake —Å–æ–æ–±—â–µ–Ω–∏–π")
            file_score += 1
        else:
            print("  ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ fake —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ ReplyParameters
        file_max += 1
        if 'ReplyParameters.*message_thread_id' in content or 'reply_parameters.*message_thread_id' in content:
            print("  ‚úÖ ReplyParameters —Å thread_id")
            file_score += 1
        else:
            print("  ‚ùå ReplyParameters —Å thread_id")
        
        total_score += file_score
        max_score += file_max
        print(f"  üìä –û—Ü–µ–Ω–∫–∞ —Ñ–∞–π–ª–∞: {file_score}/{file_max}")
    
    print(f"\nüìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {total_score}/{max_score} ({total_score/max_score*100:.1f}%)")
    
    if total_score >= max_score * 0.8:
        print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤!")
    elif total_score >= max_score * 0.6:
        print("‚úÖ –•–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤!")
    elif total_score >= max_score * 0.4:
        print("‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤")
    else:
        print("‚ùå –°–ª–∞–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤")

def check_specific_implementations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    implementations = [
        {
            "name": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ message_thread_id",
            "pattern": r"getattr\([^,]+,\s*['\"]message_thread_id['\"][^)]*\)",
            "files": ["COMMANDS", "DOWN_AND_UP", "HELPERS"]
        },
        {
            "name": "–ü–µ—Ä–µ–¥–∞—á–∞ –≤ kwargs",
            "pattern": r"kwargs\['message_thread_id'\]|message_thread_id.*kwargs",
            "files": ["COMMANDS", "DOWN_AND_UP", "HELPERS"]
        },
        {
            "name": "API —Ñ—É–Ω–∫—Ü–∏–∏ —Å thread_id",
            "pattern": r"(send_media_group|forward_messages|send_message).*message_thread_id",
            "files": ["COMMANDS", "DOWN_AND_UP"]
        },
        {
            "name": "fake_message —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º",
            "pattern": r"fake_message.*original_message|fake_message.*message_thread_id",
            "files": ["COMMANDS", "DOWN_AND_UP", "URL_PARSERS"]
        }
    ]
    
    for impl in implementations:
        found_count = 0
        for file_dir in impl["files"]:
            if os.path.exists(file_dir):
                for file_path in Path(file_dir).rglob("*.py"):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read()
                        if re.search(impl["pattern"], content, re.IGNORECASE):
                            found_count += 1
                    except Exception:
                        continue
        
        status = "‚úÖ" if found_count > 0 else "‚ùå"
        print(f"  {status} {impl['name']}: {found_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")

def check_critical_functions():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    critical_functions = [
        {
            "file": "COMMANDS/image_cmd.py",
            "function": "image_command",
            "checks": ["message_thread_id", "get_message_thread_id", "send_media_group"]
        },
        {
            "file": "DOWN_AND_UP/down_and_up.py", 
            "function": "down_and_up",
            "checks": ["message_thread_id", "forward_messages", "fake_message"]
        },
        {
            "file": "HELPERS/safe_messeger.py",
            "function": "safe_send_message",
            "checks": ["message_thread_id", "kwargs", "original_message"]
        }
    ]
    
    for func_info in critical_functions:
        file_path = func_info["file"]
        if not os.path.exists(file_path):
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            continue
            
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é
        func_pattern = rf"def\s+{func_info['function']}\s*\("
        func_match = re.search(func_pattern, content)
        
        if func_match:
            print(f"  üìÅ {file_path}::{func_info['function']}:")
            for check in func_info["checks"]:
                if check in content:
                    print(f"    ‚úÖ {check}")
                else:
                    print(f"    ‚ùå {check}")
        else:
            print(f"  ‚ùå –§—É–Ω–∫—Ü–∏—è {func_info['function']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {file_path}")

if __name__ == "__main__":
    check_thread_support_accurate()
    check_specific_implementations()
    check_critical_functions()
